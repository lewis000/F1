//求最大最小值 
 
 //输出3个数中的最大最小值
 C:
 #include<stdio.h>
 int main()
 {
 	int a,b,c,min,max;
 	printf("please input three numbers:");
 	scanf("%d%d%d",&a,&b,&c);
 	max = a > b?a:b;
 	//max = b > c?b:c;
 	max = max > c?max:c;
 	min = a < b?a:b;
 	//min = b < c?b:c;
 	min = min < c?min:c;
 	//min = a < c?a:c;     //把max/min与另一个数比较，可以较快得出结果 
 	printf("max = %d\nmin = %d",max,min);
 	return 0;
  } 

C++:
#if(0)
#include<iostream>
using namespace std;
int main()
{
	int a, b, c, max;
	int m;
	cout << "please input 3 number:a,b,c:";
	cin >> a >> b >> c;
	m = a > b ? a : b;
	max = m > c ? m : c;
	cout << "max = " << max << endl;
	return 0;
}
#endif
  
  //方法二
   #include<stdio.h>
 int main()
 {
 	int a,b,c,t;
 	printf("please input three numbers:");
 	scanf("%d%d%d",&a,&b,&c);
 	if(a<b)
 	{
 		t = a;
 		a = b;
 		b = t;
	}
	if(a<c)
	{
		t = a;
		a = c;
		c = t;
	}
	if(b<c)
	{
		t = b;
		b = c;
		c = t;
	}
	printf("max = %d\nmin = %d",a,c);
 	return 0;
  } 


//方法三：打擂台法       求最大值和该数的位置（一个数组：10个数字）     
#if(0)
#include<stdio.h>
int main()
{         //输入10个数，并调用max函数；
	int max(int x,int y);
	int a[10],i,n,m;
	printf("please input 10 numbers:");
	for(i = 0;i < 10;i++)
	{
		scanf("%d",&a[i]);
	} 
	m = a[0];
	for(i = 0;i < 10;i++)      //i = 0 || 1
	{
		if(m < max(m,a[i]))
		{
			m = max(m,a[i]);
			n = i;
		}
	}
	printf("the largest is %d\nit is the %dth number",m,n + 1);
	return 0;
}

int max(int x,int y)
{
	int m;
	m = x > y?x:y;
	return(m);
}




**********************************************************************************************************************
 //排序


 //方法一：冒泡法
 C：
 #include<stdio.h>
 int main()
 {
 	int i,j,t;
 	int a[3];   //数组  
 	printf("please input three numbers:");    //数字可改,所有的数字都要相应的改 
 	for(i = 0;i < 3;i++)      //以下两句循环输入 
 		scanf("%d",&a[i]);
 	for(j = 0;j<2;j++)      //冒泡法的核心              j的范围一定要比数组值少一      
 	{
 		for(i = 0;i < 2 - j;i++)    //i是数组下标，j是大循环 
 		{
 			if(a[i] > a[i+1])
 			{
 				t = a[i];
 				a[i] = a[i+1];
 				a[i+1] = t;
			 }
		 }
	 }
	printf("从小到大顺序:\n");
	for(i = 0;i < 3;i++)     //以下两句循环输出 
		printf("%d\t",a[i]);
  printf("\n");
	printf("max = %d",a[2]);   //冒泡法最大值是数组最后一个数据,最小值是第一个数据
 	return 0;
 }
 
C++：
#if(0)
#include<iostream>
using namespace std;
int main()
{
	int i, j, t;
	int array[4];
	cout << "please input 4 numbers:";
	for (i = 0; i < 4; i++)
	{
		cin >> array[i];
	}
	/*     //i,j顺序颠倒，输出结果也对了
	for (j = 0; j < 4; j++)
	{
		for (i = 0; i < 4 - j - 1; i++)
		{
			if (array[i] < array[i + 1])
			{
				t = array[i];
				array[i] = array[i + 1];
				array[i + 1] = t;
			}
		}
		cout << array[i] << "\t" << endl;
	}
	*/
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4 - i - 1; j++)
		{
			if (array[j] > array[j + 1])
			{
				t = array[j];
				array[j] = array[j + 1];
				array[j + 1] = t;
			}
		}
		cout << array[i] << endl;
	}
	return 0;
}
#endif





//方法二：选择法排序
/*选择法排序总的思路是：
1、找出一个最小数，交换到最前面。
2、在剩下的数里面，再找一个最小的，交换到剩下数的最前面
3、重复步骤2 ，直到所有数都已排好。
显然，对于含有N个数的数组来说，其过程也要进行N - 1趟(0 <= i < N - 1)。
上面所述步骤中，“找出一个最小数，交换到最前面”的方法是：
先将剩下数中的第一个数（序号是i）作为擂主，用变量k记下其序号，
后面的数依次与擂主（注意：擂主是a[k]，不总是a[i]）比较，
若比擂主还小，则用k记下其序号（注意：此时不要交换），当所有数都与擂主比较后，k中存放的就是最小数的序号，
然后将它交换到最前面（现在才交换）。在上面的过程中，数据只交换了一次，即每趟只交换一次数据。*/
#include<stdio.h>
#define N 10
int main()
{
	int a[N] = {10,6,2,4,98,1,3,44,11,13};
	int i, j, k, t;
	for (i = 0; i < N-1; i++)    //将该for循环部分单独拿出来作为一个函数，就是下面函数调用的写法
	{
		k = i;         //a[k]为擂主，先定义擂主下标为i（擂主是k）
		for (j = i + 1; j <= N-1; j++)   //剩下的数里找最小的           j的范围有等于号
		{
			if (a[j] < a[k])   //k是最小的标记
			{
				k = j;
			}
		}
		t = a[i];   //以下三行代码进行排序
		a[i] = a[k];    // 与擂主互换
		a[k] = t;
	}
	for (i = 0; i < N; i++)
		printf("%d\t", a[i]);
	return 0;
}
//同一种算法，函数的表达形式
C:
#if(0)
#include<stdio.h>
#define N 6
int main()
{
	void sort(int a[], int n);
	int a[N];
	int i;
	printf("please input N numbers:");
	for (i = 0; i < N; i++)
		scanf_s("%d", &a[i]);
	sort(a, N);
	printf("the sorted numbers:\n");
	for (i = 0; i < N; i++)
		printf("%d\t", a[i]);
	return 0;
}

void sort(int a[], int n)
{
	int i, j, k, t;
	for (i = 0; i < N; i++)    //N||N-1,输出结果无影响
	{
		k = i;
		for (j = i + 1; j < N; j++)
		{
			if (a[j] < a[k])
				k = j;
		}
		t = a[k];
		a[k] = a[i];
		a[i] = t;
	}
}
#endif

C++:
#if(0)
#include<iostream>

using namespace std;

int main()
{
	void sort(int a[10]);
	int b[10];
	int i;
	cout << "input 10:";
	for (i = 0; i < 10; i++)
		cin >> b[i];
	sort(b);
	for (i = 0; i < 10; i++)
	{
		cout << b[i] << "\t";
	}
	cout << endl;
	return 0;
}

void sort(int a[10])
{
	int i, j, t, k;
	for (i = 0; i < 10; i++)     //控制需要比较的次数（10个数需要比较10次）
	{
		k = i;
		for (j = i + 1; j < 10; j++)    //控制每次需要比较的个数
		{
			if (a[j] > a[k])
			{
				k = j;
			}
			t = a[k];
			a[k] = a[i];
			a[i] = t;
		}
	}
}
#endif
//由大到小排序--选择算法--指针变量做实参
#if(0)
#include<stdio.h>
int main()
{
	void sort(int x[], int n);
	//int i, a[10], * p;
	int a[10], * p;
	p = a;                          //指针变量指向a[0]
	printf("please input 10 numbers:");
	for (p = a; p < a + 10; p++)       //for (i = 0; i < 10; i++)   两种写法都可以输入10个数
		scanf_s("%d", p);                 //scanf_s("%d", p++);
	for (i = 0; i < 10; i++)
		scanf_s("%d", p++);
	p = a;                          //指针变量重新指向a[0]
	sort(p, 10);
	printf("the sorted numbers:");
	for (p = a; p < a + 10; p++)
		printf("%d\t", *p);
	return 0;
}
void sort(int x[], int n)
{
	int i, j, k, t;
	for (i = 0; i < 10; i++)
	{
		k = i;
		for (j = i + 1; j < 10; j++)
		{
			if (x[j] < x[k])
			{
				k = j;
			}
		}
		t = x[i];
		x[i] = x[k];
		x[k] = t;
	}
}
#endif
