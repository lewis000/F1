1、sort

#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<functional>
using namespace std;

void print(int val)
{
	cout << val << " ";
}

void test01()
{
	vector<int>v;
	v.push_back(0);
	v.push_back(3);
	v.push_back(44);
	v.push_back(11);
	v.push_back(33);
	v.push_back(13);
	
	//利用sort排序（默认是升序）
	sort(v.begin(), v.end());

	//打印
	for_each(v.begin(), v.end(), print);
	cout << endl;

	//利用sort排序（降序）     greater-->内建函数对象
	sort(v.begin(), v.end(), greater<int>());

	for_each(v.begin(), v.end(), print);
	cout << endl;
}

int main()
{
	test01();
	return 0;
}

**************************************************************************************************************************

2、random_shuffle    ---洗牌，随机打乱有序序列

#include<iostream>
#include<vector>
#include<algorithm>
#include<ctime>
using namespace std;

void print(int val)
{
	cout << val << " ";
}

void test01()
{
	vector<int>v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}

	//利用洗牌算法打乱顺序

	random_shuffle(v.begin(), v.end());
	for_each(v.begin(), v.end(), print);
}

int main()
{
	srand((unsigned int)time(NULL));
	test01();
	return 0;
}

*************************************************************************************************************************

3、merge：将两个容器合并成一个容器-->必须是两个相同顺序的有序序列

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

void print(int val)
{
	cout << val << " ";
}

void test01()
{
	vector<int>v1;
	vector<int>v2;
	for (int i = 0; i < 10; i++)
	{
		v1.push_back(i);
		v2.push_back(i + 10);
	}
	//目标容器
	vector<int>vt;

	vt.resize(v1.size() + v2.size());    //一定要先开辟空间
	merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vt.begin());

	for_each(vt.begin(), vt.end(), print);
}

int main()
{
	test01();
	return 0;
}

*********************************************************************************************************************************

4、reverse :反转

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

void print(int val)
{
	cout << val << " ";
}

void test01()
{
	vector<int>v1;
	v1.push_back(13);
	v1.push_back(11);
	v1.push_back(44);
	v1.push_back(33);
	v1.push_back(3);
	v1.push_back(0);

	for_each(v1.begin(), v1.end(), print);
	cout << endl;

	//反转
	reverse(v1.begin(), v1.end());
	reverse(v1.begin() + 1, v1.end() - 2);
	for_each(v1.begin(), v1.end(), print);
}

int main()
{
	test01();
	return 0;
}
