1、find--返回迭代器

#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
using namespace std;

//查找内置数据类型
void test01()
{
	vector<int>v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}
	//查找是否存在5
	vector<int>::iterator it = find(v.begin(), v.end(), 5);
	if (it == v.end())
	{
		cout << "not find" << endl;
	}
	else
	{
		cout << "find,it = " << *it << endl;
	}
}

class Person
{
public:
	Person(string name, int age)
	{
		this->m_name = name;
		this->m_age = age;
	}

	//重载==  底层find知道如何对比person数据类型
	bool operator==(const Person& p)
	{
		if (this->m_name == p.m_name && this->m_age == p.m_age)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	string m_name;
	int m_age;

};
//查找自定义数据类型
void test02()
{
	vector<Person>v;
	//创建数据
	Person p1("lewis", 44);
	Person p2("max", 33);
	Person p3("ric", 3);
	//放入到容器中
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);

	Person p("lewis", 44);
	vector<Person>::iterator it = find(v.begin(), v.end(), p);
	if (it == v.end())
	{
		cout << "not find" << endl;
	}
	else
	{
		cout << "find,name = " << it->m_name << " age = " << it->m_age << endl;
	}
}


int main()
{
	test01();
	test02();
	return 0;
}

**************************************************************************************************************************************************

2、find_if--返回迭代器

#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
using namespace std;
//内置数据类型
class GreatFive
{
public:
	bool operator()(int val)
	{
		return val > 5;
	}
};
void test01()
{
	vector<int>v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}

	vector<int>::iterator it = find_if(v.begin(), v.end(), GreatFive());
	if (it == v.end())
	{
		cout << "not find" << endl;
	}
	else
	{
		cout << "find,it = " << *it << endl;
	}
}

//自定义数据类型
class Person
{
public:
	Person(string name, int age)
	{
		this->m_name = name;
		this->m_age = age;
	}
	string m_name;
	int m_age;
};

class greater20
{
public:
	bool operator()(Person& p)
	{
		return p.m_age > 20;
	}
};

void test02()
{
	vector<Person>v;
	//创建数据
	Person p1("lewis", 44);
	Person p2("max", 33);
	Person p3("ric", 3);
	//放入到容器中
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);

	//查找年龄大于20的人
	vector<Person>::iterator it = find_if(v.begin(), v.end(), greater20());
	if (it == v.end())
	{
		cout << "not find" << endl;
	}
	else
	{
		cout << "find,name = " << it->m_name << " age = " << it->m_age << endl;
	}
	cout << endl;
	//如何查找输出全部人员，，暂时还不对
	while ( it != v.end())
	{
		if (it == v.end())
		{
			cout << "not find" << endl;
		}
		else
		{
			cout << "find,name = " << it->m_name << " age = " << it->m_age << endl;
		}
		it++;
	}
}

int main()
{
	test01();
	test02();
	return 0;
}

****************************************************************************************************************************************

3、adjacent_find：查找相邻重复元素--返回迭代器

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

void test01()
{
	vector<int>v;
	v.push_back(0);
	v.push_back(3);
	v.push_back(11);
	v.push_back(13);
	v.push_back(33);
	v.push_back(44);
	v.push_back(44);

	vector<int>::iterator pos = adjacent_find(v.begin(), v.end());

	if (pos != v.end())
	{
		cout << "找到相邻重复元素： " << *pos << endl;
	}
	else
	{
		cout << "not find" << endl;
	}
}

int main()
{
	test01();
	return 0;
}

***********************************************************************************************************************************

4、binary_search:查找指定元素是否存在 --- 在无序序列中不可用(升序，不能降序)---返回0或1（bool类型）

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

void test01()
{
	vector<int>v;
	v.push_back(0);
	v.push_back(3);
	v.push_back(11);
	v.push_back(13);
	v.push_back(33);
	v.push_back(44);
	v.push_back(44);

	/*v.push_back(44);
	v.push_back(33);
	v.push_back(13);*/


	bool ret = binary_search(v.begin(), v.end(), 44);

	if (ret)
	{
		cout << "找到元素44 " << endl;
	}
	else
	{
		cout << "not find" << endl;
	}
}

int main()
{
	test01();
	return 0;
}

***********************************************************************************************************************

5、count--返回个数（int）

include<iostream>
#include<vector>
#include<algorithm>
#include<string>
using namespace std;

//统计内置数据类型
void test01()
{
	vector<int>v;
	v.push_back(0);
	v.push_back(3);
	v.push_back(11);
	v.push_back(13);
	v.push_back(33);
	v.push_back(44);
	v.push_back(44);

	int num = count(v.begin(), v.end(), 44);

	cout << "num = " << num << endl;
}

//统计自定义数据类型-----需要重载==
class Person
{
public:
	Person(string name, int age)
	{
		this->m_name = name;
		this->m_age = age;
	}
	bool operator==(const Person& p)    //const不能少
	{
		if (this->m_age == p.m_age)
			return true;
		else
			return false;
	}
	string m_name;
	int m_age;
};

void test02()
{
	vector<Person>v;

	Person p1("lewis", 44);
	Person p2("max", 33);
	Person p3("ric", 3);

	Person p("v", 44);
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p1);
	
	int num = count(v.begin(), v.end(), p);
	cout << "num = " << num << endl;
}

int main()
{
	test01();
	test02();
	return 0;
}

***********************************************************************************************************************************

6、count_if-----返回的是个数（int）

#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
using namespace std;

//统计内置数据类型
class Greater20
{
public:
	bool operator()(int val)
	{
		return val > 20;
	}
};

void test01()
{
	vector<int>v;
	v.push_back(0);
	v.push_back(3);
	v.push_back(11);
	v.push_back(13);
	v.push_back(33);
	v.push_back(44);
	v.push_back(44);

	int num = count_if(v.begin(), v.end(), Greater20());

	cout << "大于20的数据个数：" << num << endl;
}

//统计自定义数据类型
class Person
{
public:
	Person(string name, int age)
	{
		this->m_name = name;
		this->m_age = age;
	}
	//bool operator==(const Person& p)    //const不能少
	//{
	//	if (this->m_age == p.m_age)
	//		return true;
	//	else
	//		return false;
	//}
	string m_name;
	int m_age;
};

class agegreater20     //谓词
{
public:
	bool operator()(const Person& p)   //const不能少
	{
		return p.m_age > 20;
	}
};

void test02()
{
	vector<Person>v;

	Person p1("lewis", 44);
	Person p2("max", 33);
	Person p3("ric", 3);

	Person p("v", 44);
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p1);

	int num = count_if(v.begin(), v.end(), agegreater20());
	cout << "年龄大于20的个数：" << num << endl;
}

int main()
{
	test01();
	test02();
	return 0;
}

