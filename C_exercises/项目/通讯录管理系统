//封装函数显示该界面   如 void showMenu()
//在main函数中调用封装好的函数

#include<iostream>
#include<string>
using namespace std;
#define MAX 1000
//设计联系人结构体
struct Person
{
	string m_name;
	int m_sex;     //1、男  2、女
	int m_age;
	string m_phone;
	string m_addr;
};

//设计通讯录结构体
struct Addressbooks
{
	struct Person personArray[MAX];    //通讯录中保存的联系人数组

	int m_size;     //通讯录中当前记录联系人个数

};



int main()
{
	void showMenu();
	void addperson(Addressbooks * abs);
	void showperson(Addressbooks * abs);
	int isexist(Addressbooks * abs, string name);
	void deleteperson(Addressbooks * abs);
	void findperson(Addressbooks * abs);
	void modifyperson(Addressbooks * abs);
	void clearperson(Addressbooks * abs);
	struct Addressbooks abs;
	abs.m_size = 0;

	int select = 0;    //创建用户选择输入的变量
	while (true)
	{
		showMenu();    //菜单调用

		cin >> select;
		switch (select)
		{
		case 1:          //添加联系人
			addperson(&abs);
			break;
		case 2:          //显示联系人
			showperson(&abs);
			break;
		case 3:          //删除联系人
			deleteperson(&abs);
			break;
		case 4:          //查找联系人
			findperson(&abs);
			break;
		case 5:          //修改联系人
			modifyperson(&abs);
			break;
		case 6:          //清空联系人
			clearperson(&abs);
			break;
		case 0:          //退出通讯录
			cout << "欢迎下次使用" << endl;
			system("pause");
			return 0;
			break;
		default:
			break;
		}
	}
	


	system("pause");
	return 0;
}

//封装函数显示该界面   如 void showMenu()
//在main函数中调用封装好的函数
void showMenu()
{
	cout << "1、添加联系人：" << endl;
	cout << "2、显示联系人：" << endl;
	cout << "3、删除联系人：" << endl;
	cout << "4、查找联系人：" << endl;
	cout << "5、修改联系人：" << endl;
	cout << "6、清空联系人：" << endl;
	cout << "0、退出通讯录：" << endl;
}

void addperson(Addressbooks* abs)
{
	//判断通讯录是否已满
	if (abs->m_size == MAX)
	{
		cout << "通讯录已满，无法添加" << endl;
		return;
	}
	else
	{
		//添加具体联系人
		string name;    //姓名
		cout << "请输入姓名：" << endl;
		cin >> name;
		abs->personArray[abs->m_size].m_name = name;
		int sex = 0;    //性别
		cout << "请输入性别：" << endl;
		cout << "1-->男" << endl;
		cout << "2-->女" << endl;
		while (true)
		{
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				abs->personArray[abs->m_size].m_sex = sex;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}
		
		cout << "请输入年龄：" << endl;
		int age = 0;
		cin >> age;
		abs->personArray[abs->m_size].m_age = age;

		cout << "请输入电话号码：" << endl;
		string phone;
		cin >> phone;
		abs->personArray[abs->m_size].m_phone = phone;

		cout << "请输入住址：" << endl;
		string address;
		cin >> address;
		abs->personArray[abs->m_size].m_addr = address;

		abs->m_size++;    //更新通讯录人数
		cout << "添加成功" << endl;

		system("pause");   //请按任意键操作
		system("cls");      //清屏操作
	}
}

void showperson(Addressbooks* abs)
{
	//判断通讯录中人数是否为0
	if (abs->m_size == 0)
	{
		cout << "通讯录为空" << endl;
	}
	else
	{
		for (int i = 0; i < abs->m_size; i++)
		{
			cout << "姓名：" << abs->personArray[i].m_name << "\t";
			cout << "性别：" << (abs->personArray[i].m_sex == 1?"男":"女") << "\t";
			cout << "年龄：" << abs->personArray[i].m_age << "\t";
			cout << "电话号码：" << abs->personArray[i].m_phone << "\t";
			cout << "住址：" << abs->personArray[i].m_addr << endl;

			system("pause");
			system("cls");
		}
	}
}

int isexist(Addressbooks* abs, string name)
{
	int i;
	for (i = 0; i < abs->m_size; i++)
	{
		//找到这个人名
		if (abs->personArray[i].m_name == name)
		{
			return i;
		}
	}
	return(-1);
}

void deleteperson(Addressbooks* abs)
{
	cout << "please input delete name:";
	string name;
	cin >> name;
	int ret = isexist(abs, name);    //ret = -1:未查到此人       ret !=-1：查到了
	if (ret != -1)
	{
		//找到此人，进行删除
		for (int i = ret; i < abs->m_size; i++)
		{
			//数据前移
			abs->personArray[i] = abs->personArray[i + 1];
		}
		abs->m_size--;
		cout << "删除成功" << endl;
	}
	else
	{
		cout << "查无此人" << endl;
	}
	system("pause");
	system("cls");
}

void findperson(Addressbooks* abs)
{
	cout << "please input name you find:";
	string name;
	cin >> name;
	int ret = isexist(abs, name);
	if (ret != -1)
	{
		cout << "姓名：" << abs->personArray[ret].m_name << "\t"
			<< "性别：" << (abs->personArray[ret].m_sex == 1?"男":"女") << "\t"
			<< "年龄：" << abs->personArray[ret].m_age << "\t"
			<< "号码：" << abs->personArray[ret].m_phone << "\t"
			<< "住址：" << abs->personArray[ret].m_addr << endl;
	}
	else
	{
		cout << "查无此人" << endl;
	}
	system("pause");
	system("cls");
}

void modifyperson(Addressbooks* abs)
{
	cout << "please input modify name:";
	string name;
	cin >> name;
	int ret = isexist(abs, name);
	if (ret != -1)
	{
		string name;    //姓名
		cout << "请输入姓名：" << endl;
		cin >> name;
		abs->personArray[ret].m_name = name;
		int sex = 0;    //性别
		cout << "请输入性别：" << endl;
		cout << "1-->男" << endl;
		cout << "2-->女" << endl;
		while (true)
		{
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				abs->personArray[ret].m_sex = sex;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}

		cout << "请输入年龄：" << endl;
		int age = 0;
		cin >> age;
		abs->personArray[ret].m_age = age;

		cout << "请输入电话号码：" << endl;
		string phone;
		cin >> phone;
		abs->personArray[ret].m_phone = phone;

		cout << "请输入住址：" << endl;
		string address;
		cin >> address;
		abs->personArray[ret].m_addr = address;

		cout << "修改成功" << endl;
	}
	else
	{
		cout << "no find" << endl;
	}
	system("pause");
	system("cls");
}

void clearperson(Addressbooks* abs)
{
	abs->m_size = 0;     //将记录联系人的数量置为0，做逻辑上的清空
	cout << "clear all" << endl;
	system("pause");
	system("cls");
}
