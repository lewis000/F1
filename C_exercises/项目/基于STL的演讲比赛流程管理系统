1、speaker.h文件

#pragma once
#include<iostream>
#include<string>
using namespace std;

//选手类
class Speaker
{
public:
	string m_name;    //姓名
	double m_score[2];    //分数   最多有两轮得分
};

**************************************************************************************************************************

2、speechManager.h文件

/*
在.h文件中只做声明，不做实现
*/

#pragma once
#include<iostream>
using namespace std;
#include<vector>
#include<map>
#include"speaker.h"
#include<algorithm>
#include<deque>
#include<functional>
#include<numeric>
#include<string>
#include<fstream>

//设计演讲管理类
class SpeechManager
{
public:
	//构造函数
	SpeechManager();

	//显示菜单
	void show_Menu();

	//退出功能
	void exitSystem();


	//析构函数
	~SpeechManager();

	//初始化容器和属性
	void initSpeech();

	//创建12名选手
	void createSpeaker();

	//开始比赛   比赛整个流程控制函数
	void startSpeech();

	//抽签
	void speechDraw();

	//比赛
	void speechContest();

	//显示分数
	void showScore();

	//保存记录
	void saveRecord();

	//读取记录
	void loadRecord();

	//判断文件是否为空
	bool fileIsEmpty;

	//存放往届记录的容器
	map<int, vector<string>>m_Record;

	//显示往届记录
	void showRecord();

	//清空文件
	void clearRecord();

	//成员属性
	//保存第一轮比赛选手编号的容器
	vector<int>v1;
	//第一轮晋级选手编号的容器
	vector<int>v2;
	//胜出前三名的选手编号容器
	vector<int>vVictory;

	//存放编号以及对应选手的容器
	map<int, Speaker>m_Speaker;
	//存放比赛轮数
	int m_index;
};

***********************************************************************************************************************************

3、speechManager.cpp文件

/*
.cpp文件中做实现
*/
#include"speechManager.h"
//构造函数--空实现
SpeechManager::SpeechManager()
{
	//初始化容器和属性
	this->initSpeech();

	//创建12名选手
	this->createSpeaker();

	//加载往届记录
	this->loadRecord();
}

//显示菜单
void SpeechManager::show_Menu()
{
	cout << "********************************" << endl;
	cout << "******欢迎参加演讲比赛**********" << endl;
	cout << "******1、开始演讲比赛***********" << endl;
	cout << "******2、查开往届记录***********" << endl;
	cout << "******3、清空比赛记录***********" << endl;
	cout << "******0、退出比赛程序***********" << endl;
	cout << "********************************" << endl;
	cout << endl;
}

//退出功能
void SpeechManager::exitSystem()
{
	cout << "欢迎下次使用" << endl;
	system("pause");
	exit(0);
}

//初始化容器和属性
void SpeechManager::initSpeech()
{
	//容器都置空
	this->v1.clear();
	this->v2.clear();
	this->vVictory.clear();
	this->m_Speaker.clear();

	//初始化比赛论述
	this->m_index = 1;

	//将记录容器也清空
	this->m_Record.clear();
}

//创建12名选手
void SpeechManager::createSpeaker()
{
	string nameseed = "ABCDEFGHIJKL";
	for (unsigned int i = 0; i < nameseed.size(); i++)
	//for (int i = 0; i < 12; i++)
	{
		string name = "选手";
		name += nameseed[i];
		//创建具体选手
		Speaker sp;
		sp.m_name = name;

		for (int j = 0; j < 2; j++)
		{
			sp.m_score[j] = 0;
		}

		//创建选手编号，并放入到v1容器中
		this->v1.push_back(i + 10001);

		//选手编号以及对应的选手放到map容器中
		this->m_Speaker.insert(make_pair(i + 10001, sp));
	}
}

//开始比赛   比赛整个流程控制函数
void SpeechManager::startSpeech()
{
	//第一轮开始比赛

	//1、抽签
	this->speechDraw();
	//2、比赛
	this->speechContest();
	//3、显示晋级结果
	this->showScore();
	//第二轮开始比赛
	this->m_index++;
	//1、抽签
	this->speechDraw();
	//2、比赛
	this->speechContest();
	//3、显示最终结果
	this->showScore();
	//4、保存到文件中
	this->saveRecord();

	//重置比赛
	//初始化容器和属性
	this->initSpeech();

	//创建12名选手
	this->createSpeaker();

	//加载往届记录
	this->loadRecord();

	cout << "本届比赛完美结束" << endl;
	system("pause");
	system("cls");
}

//抽签
void SpeechManager::speechDraw()
{
	cout << "第<<" << this->m_index << ">>轮选手正在抽签" << endl;
	cout << "抽签后演讲顺序如下：" << endl;

	if (this->m_index == 1)
	{
		//第一轮比赛
		random_shuffle(v1.begin(), v1.end());
		for (vector<int>::iterator it = v1.begin(); it != v1.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
	}
	else
	{
		//第二轮比赛
		random_shuffle(v2.begin(), v2.end());
		for (vector<int>::iterator it = v2.begin(); it != v2.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
	}

	system("pause");
	cout << endl;
}

//比赛
void SpeechManager::speechContest()
{
	cout << "第" << this->m_index << "轮比赛正式开始" << endl;

	//准备临时容器   存放小组成绩
	multimap<double, int, greater<double>>groupScore;
	int num = 0;  //用于统计人员个数，6人一组

	vector<int>v_Src;   //比赛选手容器
	if (this->m_index == 1)
	{
		v_Src = v1;
	}
	else
	{
		v_Src = v2;
	}
	//遍历所有选手进行比赛
	for (vector<int>::iterator it = v_Src.begin(); it != v_Src.end(); it++)
	{
		num++;
		//评委打分
		deque<double>d;
		for (int i = 0; i < 10; i++)
		{
			double score = (rand() % 401 + 600) / 10.f;   //60.0~100.0
			//cout << score << " ";    //看自己需求是否需要输出分数（对结果有异议的时候输出）
			d.push_back(score);
		}
		//cout << endl;

		sort(d.begin(), d.end(), greater<double>());    //greater是内建函数对象-----降序排列
		d.pop_front();    //去除最高分
		d.pop_back();     //去除最低分

		//求平均分
		double sum = accumulate(d.begin(), d.end(), 0.0f);   //总分
		double avg = sum / (double)d.size();     //平均分

		//打印平均分      测试
		//cout << "编号：" << *it << " 姓名：" << this->m_Speaker[*it].m_name << " 平均分：" << avg << endl;

		//将平均分放到map容器里
		this->m_Speaker[*it].m_score[this->m_index - 1] = avg;

		//将打分数据放到临时容器中
		groupScore.insert(make_pair(avg, *it));   //key是平均分   value是具体选手的编号

		//每6人取前三名
		if (num % 6 == 0)
		{
			cout << "第" << num / 6 << "小组比赛名次：" << endl;
			for (multimap<double, int, greater<double>>::iterator it = groupScore.begin(); it != groupScore.end(); it++)
			{
				cout << "编号：" << it->second << " 姓名：" << this->m_Speaker[it->second].m_name
					<< " 成绩：" << this->m_Speaker[it->second].m_score[this->m_index - 1] << endl;
			}

			//取走前三名
			int count = 0;
			for (multimap<double, int, greater<double>>::iterator it = groupScore.begin(); it != groupScore.end() && count < 3; it++, count++)
			{
				if (this->m_index == 1)
				{
					v2.push_back((*it).second);
				}
				else
				{
					vVictory.push_back((*it).second);
				}
			}

			groupScore.clear();   //小组容器清空
			cout << endl;   //两个小组之间换行

		}
	}
	cout << "第" << this->m_index << "轮比赛完毕" << endl;
	system("pause");
}

//显示分数
void SpeechManager::showScore()
{
	cout << "第" << this->m_index << "轮选手晋级信息如下：" << endl;
	vector<int>v;
	if (this->m_index == 1)
	{
		v = v2;
	}
	else
	{
		v = vVictory;
	}

	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "编号：" << *it << " 姓名：" << this->m_Speaker[*it].m_name
			<< " 分数：" << this->m_Speaker[*it].m_score[this->m_index - 1] << endl;
	}
	cout << endl;

	system("pause");
	system("cls");

	this->show_Menu();
}

//保存记录
void SpeechManager::saveRecord()
{
	ofstream ofs;
	ofs.open("speech.csv", ios::out | ios::app);    //用追加的方式写文件

	//将每个选手信息写入文件中
	for (vector<int>::iterator it = vVictory.begin(); it != vVictory.end(); it++)
	{
		ofs << *it << "," << this->m_Speaker[*it].m_name << "," 
			<< this->m_Speaker[*it].m_score[1] << ",";
	}
	ofs << endl;
	ofs.close();

	cout << "记录已保存" << endl;

	//更改文件不为空的状态
	this->fileIsEmpty = false;
}

//读取记录
void SpeechManager::loadRecord()
{
	ifstream ifs("speech.csv", ios::in);   //读文件

	if (!ifs.is_open())
	{
		this->fileIsEmpty = true;
		//cout << "文件不存在" << endl;
		ifs.close();
		return;
	}

	//文件清空的情况
	char ch;
	ifs >> ch;
	if (ifs.eof())
	{
		this->fileIsEmpty = true;
		ifs.close();
		return;
	}

	//文件不为空
	this->fileIsEmpty = false;

	ifs.putback(ch);  //将上面读取的单个字符 放回来
	string data;
	int index = 0;

	while (ifs >> data)    //ifs读取data
	{
		//cout << data << endl;
		//解析结果
		vector<string>v;   //存放string的字符串
		int pos = -1;  //查到","位置的变量
		int start = 0;

		while (true)
		{
			pos = data.find(",", start);
			if (pos == -1)
			{
				//没有找到的情况
				break;
			}
			string temp = data.substr(start, pos - start);
			//cout << temp << endl;
			v.push_back(temp);
			start = pos + 1;
		}

		this->m_Record.insert(make_pair(index, v));
		index++;
	}

	ifs.close();

	/*for (map<int, vector<string>>::iterator it = m_Record.begin(); it != m_Record.end(); it++)
	{
		cout << "第" << it->first + 1 << "届演讲比赛:" << "冠军编号：" << it->second[0]
			<< " 姓名：" << it->second[1] << " 分数：" << it->second[2] << endl;
	}*/
}

//显示往届记录
void SpeechManager::showRecord()
{
	if (this->fileIsEmpty)
	{
		cout << "文件为空或者不存在" << endl;
	}
	else
	{
		for (unsigned int i = 0; i < this->m_Record.size(); i++)
		{
			cout << "第" << i + 1 << "届演讲比赛："
				<< "冠军编号：" << this->m_Record[i][0] << " 姓名：" << this->m_Record[i][1] << " 分数：" << this->m_Record[i][0]
				<< " 亚军编号：" << this->m_Record[i][3] << " 姓名：" << this->m_Record[i][4] << " 分数：" << this->m_Record[i][5]
				<< " 季军编号：" << this->m_Record[i][6] << " 姓名：" << this->m_Record[i][7] << " 分数：" << this->m_Record[i][8]
				<< endl;
		}
	}

	system("pause");
	system("cls");
}

//清空文件
void SpeechManager::clearRecord()
{
	cout << "是否确定清空？" << endl;
	cout << "1、是" << endl;
	cout << "2、否" << endl;

	int select = 0;

	cin >> select;
	if (select == 1)
	{
		//确认清空
		ofstream ofs("speech.csv", ios::trunc);  //删除并重新创建一个空文件
		ofs.close();

		//初始化容器和属性
		this->initSpeech();

		//创建12名选手
		this->createSpeaker();

		//加载往届记录
		this->loadRecord();

		cout << "清除成功" << endl;
	}

	system("pause");
	system("cls");
}

//析构函数--空实现
SpeechManager::~SpeechManager()
{

}

********************************************************************************************************************

4、演讲比赛流程管理系统---main函数

#include<iostream>
using namespace std;
#include"speechManager.h"
#include<ctime>

int main()
{
	//随机数种子
	srand((unsigned int)time(NULL));
	//创建管理类对象
	SpeechManager sm;
	
	//测试12名选手的创建
	/*for (map<int, Speaker>::iterator it = sm.m_Speaker.begin(); it != sm.m_Speaker.end(); it++)
	{
		cout << "选手编号：" << it->first << " name:" << it->second.m_name 
			<< " score:" << it->second.m_score[0] << endl;
	}*/


	int choice = 0;   //用来存储用户的选项
	while (true)
	{
		sm.show_Menu();

		cout << "请输入您的选择：" << endl;
		cin >> choice;

		switch (choice)
		{
		case 1:       //开始比赛
			sm.startSpeech();
			break;
		case 2:       //查开记录
			sm.showRecord();
			break;
		case 3:        //清空记录
			sm.clearRecord();
			break;
		case 0:        //退出系统
			sm.exitSystem();
			break;
		default:
			system("cls");    //清屏
			break;
		}
	}

	system("pause");
	return 0;
}
