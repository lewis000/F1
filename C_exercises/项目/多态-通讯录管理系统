//主函数
#include<iostream>
using namespace std;
#include"workerManger.h"

//#include"worker.h"
//#include"employee.h"
//#include"manager.h"
//#include"boss.h"


int main()
{

	//实例化管理者对象
	WorkerManger wm;
	int choice = 0;   //用来存储用户的选项

	while (true)
	{
		//调用展示菜单成员函数
		wm.Show_Menu();
		cout << "请输入你的选择：" << endl;
		cin >> choice;

		switch (choice)
		{
		case 0:   //退出系统
			wm.ExitSystem();
			break;
		case 1:   //增加职工信息
			wm.Add_Emp();
			break;
		case 2:    //显示职工信息
			wm.Show_Emp();
			break;
		case 3:    //删除职工
			wm.Del_Emp();
			break;
		case 4:     //修改职工信息
			wm.Mod_Emp();
			break;
		case 5:      //查找职工信息
			wm.Find_Emp();
			break;
		case 6:      //排序职工
			wm.Sort_Emp();
			break;
		case 7:      //清除文档
			wm.Clear_File();
			break;
		default:
			system("cls");   //清屏
			break;
		}
	}

	

	system("pause");
	return 0;
}

**************************************************************************************************
//构造函数
#include"workerManger.h"
//#include"worker.h"

WorkerManger::WorkerManger()
{
	//初始化属性
	
	//1、文件不存在
	ifstream ifs;
	ifs.open(FILENAME, ios::in);  //读文件
	if (!ifs.is_open())
	{
		//cout << "文件不存在" << endl;
		//初始化人数为0
		this->m_EmpNum = 0;
		//初始化数组指针为空
		this->m_EmpArray = NULL;
		//初始化文件是否为空
		this->m_FileIsEmpty = true;
		ifs.close();
		return;
	}
	//2、文件存在，数据为空
	char ch;
	ifs >> ch;       //直接使用输入流？？？？
	if (ifs.eof())
	{
		//文件为空
		//cout << "文件为空" << endl;
		//初始化人数为0
		this->m_EmpNum = 0;
		//初始化数组指针为空
		this->m_EmpArray = NULL;
		//初始化文件是否为空
		this->m_FileIsEmpty = true;
		ifs.close();
		return;
	}
	//3、文件存在且有数据
	int num = this->get_EmpNum();
	cout << "职工人数：" << num << endl;
	this->m_EmpNum = num;
	//开辟空间
	this->m_EmpArray = new Worker * [this->m_EmpNum];
	//将文件数据，存到数组中
	this->init_Emp();
	//测试代码
	/*for (int i = 0; i < this->m_EmpNum; i++)
	{
		cout << "职工编号：" << this->m_EmpArray[i]->m_Id
			<< "职工姓名：" << this->m_EmpArray[i]->m_name
			<< "部门编号：" << this->m_EmpArray[i]->m_DeptId << endl;
	}*/

	
}

void WorkerManger::Show_Menu()
{
	cout << "************************************" << endl;
	cout << "********欢迎使用职工管理系统********" << endl;
	cout << "********* 0.退出管理程序************" << endl;
	cout << "********* 1.增加职工信息************" << endl;
	cout << "********* 2.显示职工信息************" << endl;
	cout << "********* 3.删除离职职工************" << endl;
	cout << "********* 4.修改职工信息************" << endl;
	cout << "********* 5.查找职工信息************" << endl;
	cout << "********* 6.按照编号排序************" << endl;
	cout << "********* 7.清空所有文档************" << endl;
	cout << "************************************" << endl;
	cout << endl;

	
}

//退出系统
void WorkerManger::ExitSystem()
{
	cout << "欢迎再次使用" << endl;
	system("pause");
	exit(0);
}

//添加职工
void WorkerManger::Add_Emp()
{
	cout << "请输入添加的职工数量：" << endl;

	int addNum = 0;   //保存用户的输入数量

	cin >> addNum;

	if (addNum > 0)
	{
		//添加
		//计算添加新空间的大小
		int newSize = this->m_EmpNum + addNum;   //新空间人数=原来记录人数+新增人数
		//开辟新空间
		Worker** newSpace = new Worker * [newSize];
		//将原来数据拷贝到新空间下
		if (this->m_EmpArray != NULL)
		{
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				newSpace[i] = this->m_EmpArray[i];
			}
		}
		//批量添加新数据
		for (int i = 0; i < addNum; i++)
		{
			int id;   //职工编号
			string name;  //职工姓名
			int dSelect;   //部门选择
			cout << "请输入第" << i + 1 << "新职工编号" << endl;
			cin >> id;
			cout << "请输入第" << i + 1 << "新职工姓名" << endl;
			cin >> name;
			cout << "请选择该职工岗位" << "\t1、普通员工\t2、经理\t3、老板" << endl;
			cin >> dSelect;

			Worker* worker = NULL;
			switch (dSelect)
			{
			case 1:
				worker = new Employee(id, name, 1);
				break;
			case 2:
				worker = new Manager(id, name, 2);
				break;
			case 3:
				worker = new Boss(id, name, 3);
				break;
			default:
				break;
			}
			//将创建职工保存到数组中
			newSpace[this->m_EmpNum + i] = worker;
		}
		//释放原有的空间
		delete[] this->m_EmpArray;

		//更改新空间的指向
		this->m_EmpArray = newSpace;

		//记录新职工人数
		this->m_EmpNum = newSize;
		//更新职工不为空的情况
		this->m_FileIsEmpty = false;

		//提示添加成功
		cout << "成功添加" << addNum << "名新职工" << endl;
		//保存数据到文件中
		this->save();
	}
	else
	{
		cout << "woring num,please input again." << endl;
	}

	system("pause");
	system("cls");
}

//保存文件
void WorkerManger::save()
{
	ofstream ofs;
	ofs.open(FILENAME, ios::out); //输出方式打开文件--写文件
	//将每个人的数据写入文件中
	for (int i = 0; i < this->m_EmpNum; i++)
	{
		ofs << this->m_EmpArray[i]->m_Id << " "
			<< this->m_EmpArray[i]->m_name << " "
			<< this->m_EmpArray[i]->m_DeptId << endl;
	}
	//关闭文件
	ofs.close();
}

//统计文件中人数
int WorkerManger::get_EmpNum()
{
	ifstream ifs;
	ifs.open(FILENAME, ios::in);  //打开文件  读
	int id;
	string name;
	int dId;
	int num = 0;
	while (ifs >> id && ifs >> name && ifs >> dId)    //读文件中的数据   为什么是这么写的？？？？？？？
	{
		//统计人数
		num++;
	}
	//ifs.close();
	return num;
}

//初始化员工
void WorkerManger::init_Emp()
{
	ifstream ifs;
	ifs.open(FILENAME, ios::in);
	int id;
	string name;
	int dId;
	int index = 0;
	while (ifs >> id && ifs >> name && ifs >> dId)
	{
		Worker* worker = NULL;
		if (dId == 1)   //普通职工
		{
			worker = new Employee(id, name, dId);
		}
		else if (dId == 2)  //经理
		{
			worker = new Manager(id, name, dId);
		}
		else if (dId == 3)   //老板
		{
			worker = new Boss(id, name, dId);
		}
		this->m_EmpArray[index] = worker;
		index++;
	}
	//关闭文件
	ifs.close();
}

//显示职工
void WorkerManger::Show_Emp()
{
	//判断文件是否为空
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或为空" << endl;
	}
	else
	{
		for (int i = 0; i < m_EmpNum; i++)
		{
			//利用多态调用程序接口
			this->m_EmpArray[i]->showInfo();
		}
	}
	//按任意键清屏
	system("pause");
	system("cls");
}

//删除职工
void WorkerManger::Del_Emp()
{
	if (this->m_FileIsEmpty)
	{
		cout << "没有文件或记录为空" << endl;
	}
	else
	{
		//按照职工编号删除
		cout << "请输入想要删除的员工编号：" << endl;
		int id = 0;
		cin >> id;

		int index = this->IsExist(id);
		if (index != -1)   //说明职工存在,并且要删除掉index位置上的职工
		{
			for (int i = index; i < this->m_EmpNum - 1; i++)
			{
				//数据前移
				this->m_EmpArray[i] = this->m_EmpArray[i + 1];
			}
			this->m_EmpNum--;    //更新数组中记录的人员个数
			//数据同步更新到文件中
			this->save();

			cout << "职工删除成功" << endl;
		}
		else
		{
			cout << "未找到该职工" << endl;
		}
	}
	system("pause");
	system("cls");
}

//判断职工是否存在，如果存在返回职工所在数组中的位置，不存在返回-1
int WorkerManger::IsExist(int id)
{
	int index = -1;
	for (int i = 0; i < this->m_EmpNum; i++)
	{
		if (this->m_EmpArray[i]->m_Id == id)
		{
			//找到职工
			index = i;
			break;
		}
	}
	return(index);
}

//修改职工
void WorkerManger::Mod_Emp()
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或者记录为空" << endl;
	}
	else
	{
		cout << "请输入所要修改的员工编号：" << endl;
		int id;
		cin >> id;

		int ret = this->IsExist(id);
		if (ret != -1)
		{
			//查找到编号的职工
			delete this->m_EmpArray[ret];
			int newid = 0;
			string newname = "";
			int newSelect = 0;
			cout << "查找到" << id << "号职工，请输入新的职工编号：" << endl;
			cin >> newid;
			cout << "请输入新的职工姓名：" << endl;
			cin >> newname;
			cout << "请输入新的部门编号(1、普通员工\t2、经理\t3、老板)：" << endl;
			cin >> newSelect;

			Worker* worker = NULL;
			switch (newSelect)
			{
			case 1:
				worker = new Employee(newid, newname, newSelect);
				break;
			case 2:
				worker = new Manager(newid, newname, newSelect);
				break;
			case 3:
				worker = new Boss(newid, newname, newSelect);
				break;
			default:
				break;
			}
			//更新数据到数组中
			this->m_EmpArray[ret] = worker;

			cout << "修改成功" << endl;

			//保存到文件中
			this->save();
		}
		else
		{
			cout << "查无此人，无法修改" << endl;
		}
	}
	system("pause");
	system("cls");
}

//查找职工
void WorkerManger::Find_Emp()
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或者记录为空" << endl;
	}
	else
	{
		cout << "请输入查找方式（1、按照职工编号\t2、按照职工姓名）：" << endl;
		int select = 0;
		cin >> select;
		if (select == 1)
		{
			//按照职工编号查找
			int id;
			cout << "请输入查找职工编号：" << endl;
			cin >> id;
			int ret = IsExist(id);
			if (ret != -1)
			{
				cout << "查找到该职工，该职工信息如下：" << endl;
				this->m_EmpArray[ret]->showInfo();
			}
			else
			{
				cout << "查无此人" << endl;
			}
		}
		else if (select == 2)
		{
			//按照姓名查找
			string name;
			cout << "请输入所要查找的职工姓名：" << endl;
			cin >> name;

			//加入是否查到的标志
			bool flag = false;   //默认未找到

			for (int i = 0; i < m_EmpNum; i++)
			{
				if (this->m_EmpArray[i]->m_name == name)
				{
					cout << "查到该职工，信息如下：" << endl;
					flag = true;
					//调用显示信息的接口
					this->m_EmpArray[i]->showInfo();
				}
			}
			if (flag == false)
			{
				cout << "查无此人" << endl;
			}
		}
		else
		{
			cout << "输入错误" << endl;
		}
	}
	system("pause");
	system("cls");
}

//按照编号排序
void WorkerManger::Sort_Emp()
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或为空" << endl;
		system("pause");
		system("cls");
	}
	else
	{
		cout << "请选择排序方式（1、升序\t2、降序）：" << endl;
		int select = 0;
		cin >> select;
		for (int i = 0; i < m_EmpNum; i++)
		{
			int minOrmax = i;  //声明最小值或最大值下标
			for (int j = i + 1; j < m_EmpNum; j++)
			{
				if (select == 1)   //升序
				{
					if (this->m_EmpArray[minOrmax]->m_Id > this->m_EmpArray[j]->m_Id)
					{
						minOrmax = j;
					}
				}
				else   //降序（输入有误，默认为降序）
				{
					if (this->m_EmpArray[minOrmax]->m_Id < this->m_EmpArray[j]->m_Id)
					{
						minOrmax = j;
					}
				}
			}
			//判断一开始认定的 最大值或最小值 是不是 计算的 最大值或最小值，如果不是，交换数据
			if (i != minOrmax)
			{
				Worker* temp = this->m_EmpArray[i];
				this->m_EmpArray[i] = this->m_EmpArray[minOrmax];
				this->m_EmpArray[minOrmax] = temp;
			}
		}
		cout << "排序成功" << endl;
		this->save();   //保存到文件中
		this->Show_Emp();   //显示所有职工
	}
}

//清空文件
void WorkerManger::Clear_File()
{
	cout << "确定清空？" << "\t1、确定" << "\t2、返回" << endl;
	int select = 0;
	cin >> select;

	if (select == 1)
	{
		//清空文件
		ofstream ofs(FILENAME, ios::trunc);   //删除文件后，在创建（空文件）
		ofs.close();

		if (this->m_EmpArray != NULL)
		{
			//删除堆区的每个职工对象
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				delete this->m_EmpArray[i];
				this->m_EmpArray[i] = NULL;
			}
			//删除堆区数组指针
			delete[] this->m_EmpArray;
			this->m_EmpArray = NULL;
			this->m_EmpNum = 0;
			this->m_FileIsEmpty = true;
		}

		cout << "清空成功" << endl;
	}
	system("pause");
	system("cls");
}

//析构函数
WorkerManger::~WorkerManger()
{
	if (this->m_EmpArray != NULL)
	{
		for (int i = 0; i < this->m_EmpNum; i++)
		{
			if (this->m_EmpArray[i] != NULL)
			{
				delete[]this->m_EmpArray[i];
			}
		}

		delete[] this->m_EmpArray;
		this->m_EmpArray = NULL;
	}
}

********************************************************************************************************
//声明函数
#pragma once       //防止头文件重复包含
#include<iostream>
#include"worker.h"
#include"boss.h"
#include"employee.h"
#include"manager.h"

#include<fstream>
#define FILENAME "empFile.txt"

using namespace std;
class WorkerManger
{
public:
	//构造函数
	WorkerManger();
	
	//展示菜单
	void Show_Menu();

	//退出系统
	void ExitSystem();
	
	//记录职工人数
	int m_EmpNum;
	//职工数组指针
	Worker** m_EmpArray;
	
	//添加职工
	void Add_Emp();

	//保存文件
	void save();

	//判断文件是否为空  标志
	bool m_FileIsEmpty;

	//统计文件中人数
	int get_EmpNum();

	//初始化员工
	void init_Emp();

	//显示职工
	void Show_Emp();

	//删除职工
	void Del_Emp();

	//判断职工是否存在，如果存在返回职工所在数组中的位置，不存在返回-1
	int IsExist(int id);

	//修改职工
	void Mod_Emp();

	//查找职工
	void Find_Emp();

	//按照编号排序
	void Sort_Emp();

	//清空文件
	void Clear_File();

	//析构函数
	~WorkerManger();
};

*****************************************************************************************
//纯虚函数
#pragma once
#include<iostream>
#include<string>
using namespace std;

//职工抽象类
class Worker
{
public:
	//显示个人全部信息
	virtual void showInfo() = 0;
	//获取岗位名称
	virtual string getDeptName() = 0;
	int m_Id;  //职工编号
	string m_name;   //职工姓名
	int m_DeptId;   //部门编号
};

***************************************************************************************
//继承纯虚函数--声明--boss
#pragma once
#include<iostream>
using namespace std;
#include"worker.h"

class Boss :public Worker
{
public:
	//构造函数
	Boss(int id, string name, int dId);
	//显示全部信息
	virtual void showInfo();
	//岗位信息
	virtual string getDeptName();
};

********************************************************************************************

//继承纯虚函数--声明--employee
//普通员工文件
#pragma once
#include<iostream>
#include"worker.h"
using namespace std;

class Employee :public Worker
{
public:
	//构造函数
	Employee(int id, string name, int dId);
	//显示个人全部信息
	virtual void showInfo();
	//获取岗位名称
	virtual string getDeptName();
};

********************************************************************************************************
//继承纯虚函数--声明--manager
#pragma once
#include<iostream>
using namespace std;
#include"worker.h"
//经理类
class Manager:public Worker
{
public:

	//构造函数
	Manager(int id, string name, int dId);
	//显示个人全部信息
	virtual void showInfo();
	//获取岗位名称
	virtual string getDeptName();
};

*********************************************************************************************
//继承纯虚函数--实现--boss
#include"boss.h"

Boss::Boss(int id, string name, int dId)
{
	this->m_Id = id;
	this->m_name = name;
	this->m_DeptId = dId;
}

void Boss::showInfo()
{
	cout << "员工姓名：" << this->m_name
		<< "\t员工编号：" << this->m_Id
		<< "\t岗位：" << this->getDeptName() << endl;
}

string Boss::getDeptName()
{
	return string("老板");
}

****************************************************************************************************

//继承纯虚函数--实现--employee
#include"employee.h"


//构造函数
Employee::Employee(int id,string name,int dId)
{
	this->m_Id = id;
	this->m_name = name;
	this->m_DeptId = dId;
}
//显示个人全部信息
void Employee::showInfo()
{
	cout << "员工姓名：" << this->m_name
		<< "\t员工编号：" << this->m_Id
		<< "\t岗位：" << this->getDeptName() << endl;
}
	//获取岗位名称
string Employee::getDeptName()
{
	return string("普通员工");
}

******************************************************************************************************************

//继承纯虚函数--实现--manager
#include"manager.h"


//构造函数
Manager::Manager(int id, string name, int dId)
{
	this->m_Id = id;
	this->m_name = name;
	this->m_DeptId = dId;
}
//显示个人全部信息
void Manager::showInfo()
{
	cout << "员工姓名：" << this->m_name
		<< "\t员工编号：" << this->m_Id
		<< "\t岗位：" << this->getDeptName() << endl;
}
//获取岗位名称
string Manager::getDeptName()
{
	return string("经理");
}
